import os
import time
import json
import tempfile
import threading
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Simple in-memory storage for demo
active_jobs = {}
transcripts = {}

@app.route('/')
def index():
    return jsonify({
        "message": "YouTube Transcriber Backend - LIVE!",
        "status": "running",
        "version": "1.0",
        "endpoints": ["/transcribe", "/progress/<job_id>", "/download/<job_id>/<filename>"]
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "timestamp": time.time()})

def simulate_transcription(job_id, url, languages, formats):
    """Simulate transcription process for now"""
    try:
        active_jobs[job_id] = {
            'status': 'processing',
            'progress': 0,
            'message': 'Starting transcription...'
        }
        
        # Simulate progress
        steps = [
            (10, "Downloading audio..."),
            (30, "Loading AI model..."),
            (60, "Transcribing speech..."),
            (80, "Generating formats..."),
            (100, "Complete!")
        ]
        
        for progress, message in steps:
            active_jobs[job_id]['progress'] = progress
            active_jobs[job_id]['message'] = message
            time.sleep(1)  # Simulate work
        
        # Generate sample files
        sample_transcript = f"""Sample Transcript for: {url}

This is a sample transcription of your YouTube video.
In the real implementation, this would contain the actual transcribed content.

Generated at: {time.strftime('%Y-%m-%d %H:%M:%S')}
Languages: {', '.join(languages)}
Formats: {', '.join(formats)}
"""
        
        # Create sample files for each language/format combination
        files = {}
        for lang in languages:
            files[lang] = {}
            for fmt in formats:
                filename = f"transcript_{lang}.{fmt}"
                
                if fmt == 'txt':
                    content = sample_transcript
                elif fmt == 'srt':
                    content = """1
00:00:00,000 --> 00:00:05,000
This is a sample subtitle file.

2
00:00:05,000 --> 00:00:10,000
Generated by the YouTube Transcriber.
"""
                elif fmt == 'json':
                    content = json.dumps({
                        "title": "Sample Video",
                        "language": lang,
                        "transcript": sample_transcript,
                        "segments": [
                            {"start": 0, "end": 5, "text": "This is a sample subtitle file."},
                            {"start": 5, "end": 10, "text": "Generated by the YouTube Transcriber."}
                        ]
                    }, indent=2)
                else:
                    content = sample_transcript
                
                # Store in memory for demo
                transcripts[filename] = content
                files[lang][fmt] = filename
        
        # Mark as completed
        active_jobs[job_id].update({
            'status': 'completed',
            'progress': 100,
            'message': 'Transcription completed!',
            'files': files,
            'title': 'Sample Video'
        })
        
    except Exception as e:
        active_jobs[job_id] = {
            'status': 'error',
            'message': str(e)
        }

@app.route('/transcribe', methods=['POST'])
def transcribe():
    try:
        job_id = str(int(time.time() * 1000))
        
        # Parse request
        if request.is_json:
            data = request.get_json()
            url = data.get('url', 'https://youtube.com/sample')
            languages = data.get('languages', ['en'])
            formats = data.get('formats', ['txt'])
        else:
            url = request.form.get('url', 'https://youtube.com/sample')
            languages = json.loads(request.form.get('languages', '["en"]'))
            formats = json.loads(request.form.get('formats', '["txt"]'))
        
        # Start background processing
        thread = threading.Thread(
            target=simulate_transcription,
            args=(job_id, url, languages, formats)
        )
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'success': True,
            'job_id': job_id,
            'message': 'Transcription started'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/progress/<job_id>')
def get_progress(job_id):
    if job_id not in active_jobs:
        return jsonify({'error': 'Job not found'}), 404
    return jsonify(active_jobs[job_id])

@app.route('/download/<job_id>/<filename>')
def download_file(job_id, filename):
    if filename not in transcripts:
        return jsonify({'error': 'File not found'}), 404
    
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt')
    temp_file.write(transcripts[filename])
    temp_file.close()
    
    return send_file(temp_file.name, as_attachment=True, download_name=filename)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"ðŸš€ Starting YouTube Transcriber on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
